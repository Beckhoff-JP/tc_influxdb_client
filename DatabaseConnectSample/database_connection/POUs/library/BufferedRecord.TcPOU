<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="BufferedRecord" Id="{8b3999e3-c2e1-4344-9092-4e707723d89a}" SpecialFunc="None">
    <Declaration><![CDATA[(*
Bufferd mode that is accumulated and bulk insert. Accumulated data size is calculated automatically among mininum/maximum_chunk_size parameter.
*)

FUNCTION_BLOCK BufferedRecord IMPLEMENTS IRecordDataQueue
VAR
	_current_index	: UDINT; // current index value
	_next_index 		: UDINT;
	_min_chunk_size				: UDINT := DBLibParam.DATA_BUFFER_SIZE / 20;		// Minimum chunk size
	_max_chunk_size				: UDINT	:= DBLibParam.DATA_BUFFER_SIZE;				// Maximum chunk size
	_buffer_byte_size			: UDINT;
	_buffer_array_size			: UDINT;			// upper bound of data buffer array.
	_buffer_usage				: REAL;				// data usage percentage of data buffer.
	_buffer_pointer 			: PVOID := 0;
	_sql_parameters				: sql_parameters;
	_structure_pointer : PVOID;
	_structure_size : UDINT;
	_structure_name : T_MaxString;
	_recorder 					: IRecordDB;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Property Name="buffer_usage" Id="{0a2de567-1b68-45ab-abab-35853abf83fa}">
      <Declaration><![CDATA[{warning 'add property implementation'}
(* Usage of data buffer (0 - 1.0) [1/100%] *)
PROPERTY buffer_usage : REAL
]]></Declaration>
      <Get Name="Get" Id="{fc49c7c3-79a6-433f-90e2-834dc5676a7e}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[buffer_usage := _buffer_usage;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Method Name="FB_init" Id="{60fdb3e5-25f4-4374-8251-80149f28a778}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	recorder	:IRecordDB; // IRecordDB is a interface class of database connection endpoint object.
	buffer_pointer	: PVOID;
	buffer_size		: UDINT;
	buffer_array_size : UDINT;
END_VAR

]]></Declaration>
      <Implementation>
        <ST><![CDATA[_recorder := recorder;
_buffer_pointer := buffer_pointer;
_buffer_byte_size := buffer_size;
_buffer_array_size := buffer_array_size;
_structure_size := _buffer_byte_size / _buffer_array_size;]]></ST>
      </Implementation>
    </Method>
    <Property Name="index" Id="{14045ef6-f59e-4a14-bab6-425c44445155}">
      <Declaration><![CDATA[(* Current index of data buffer array *)
PROPERTY index : UDINT]]></Declaration>
      <Get Name="Get" Id="{ffbd4f52-8e5e-4810-9b2a-1a43f99167d3}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[index := _current_index;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="max_chunk_size" Id="{02c2c686-c7db-499b-a50c-3e861736b577}">
      <Declaration><![CDATA[PROPERTY PUBLIC max_chunk_size : UDINT]]></Declaration>
      <Get Name="Get" Id="{0baff072-67eb-4a7c-8fad-76d523574483}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[max_chunk_size := _max_chunk_size;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{59369926-4939-4df1-910f-88ccb0b731a6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_max_chunk_size := max_chunk_size;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="min_chunk_size" Id="{7194ace4-c543-4d3b-bb4c-7732e82ecf0f}">
      <Declaration><![CDATA[PROPERTY PUBLIC min_chunk_size : UDINT]]></Declaration>
      <Get Name="Get" Id="{a7346a3e-d6df-4d67-acd9-15108b0b7d1f}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[min_chunk_size := _min_chunk_size;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{bf381183-3550-45b7-9d0d-d87b431cae4d}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_min_chunk_size := min_chunk_size;
]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="next_index" Id="{f5a3ffd6-3bc9-426f-b681-aff2cae57f4f}">
      <Declaration><![CDATA[(* The target buffer index at which assume the data in buffer reaches specified size and bulk insert command be sent to database engine.  *)
PROPERTY next_index : UDINT]]></Declaration>
      <Get Name="Get" Id="{6789c059-d92d-49d3-96f5-eb79ca9b5e2b}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[next_index := _next_index;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="recorder" Id="{953ac517-3ea9-4017-9815-a96521973cf0}">
      <Declaration><![CDATA[{warning 'add property implementation'}
PROPERTY recorder : IRecordDB
]]></Declaration>
      <Get Name="Get" Id="{18029c01-d41d-4db6-850d-5357d4d467a5}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[recorder := _recorder;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{27b20a6d-ac34-4038-b724-3d4c6ddb496c}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_recorder := recorder;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Property Name="SQL_parameters" Id="{2eaf2441-9d12-4ef2-ae85-40c278777d68}">
      <Declaration><![CDATA[{warning 'add property implementation'}
PROPERTY SQL_parameters : REFERENCE TO sql_parameters
]]></Declaration>
      <Get Name="Get" Id="{67cb16a1-8709-4f59-945a-b531330fca7a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[SQL_parameters REF= _sql_parameters;]]></ST>
        </Implementation>
      </Get>
    </Property>
    <Property Name="structure_name" Id="{900b0c23-47dd-4f6e-9680-a5bd6f305cea}">
      <Declaration><![CDATA[{warning 'add property implementation'}
PROPERTY structure_name : Tc2_System.T_MaxString
]]></Declaration>
      <Get Name="Get" Id="{37b366f7-321c-4764-91de-4e4f5f423a15}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[structure_name := _structure_name;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{2fb20688-c32a-49b3-9f21-28e8605ec7e6}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_structure_name := structure_name;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="write" Id="{4d6a4f57-2187-4032-b3a4-3e31e3263b61}">
      <Declaration><![CDATA[(*The method to write to database through data buffer with queue.*)
{warning 'add method implementation '}
METHOD write : BOOL // Return true if data is put on buffer queue successfully.
VAR_INPUT
	input_data	: PVOID;	// Set the measured data. It should be same data type as item of data buffer that is set at "buffer_pointer" on "FB_init" constructor.
END_VAR
VAR
	gCurrentData	:T_Arg;
	pCurrentBufferPointer : PVOID;
	work_data_body  :ChunkCommand;
	nTaskIdx: DINT;
	queue_input_flag: BOOL;
END_VAR
VAR_INST
// Start point time
	start_time		: ULINT;
	start_data 		: T_Arg;

	nCycleTime		: UDINT;					// PLC task cycle time setting(in 100ns)
	data_size		: UDINT := 1;				// record data size
	accumulated_amount		: UDINT := 0;		// buffer usage
	last_data_count	: UDINT := 0;
	
	start_index		: UDINT;
	_avalable_buffer_size	:DINT;
	diff_target		: REAL;
	pid_ope			: REAL;	
	chunk_size 		: UDINT;
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF _recorder = 0 THEN
	write := FALSE;
	RETURN;
END_IF

pCurrentBufferPointer := _buffer_pointer + _structure_size * _current_index;
MEMCPY(pCurrentBufferPointer, input_data, _structure_size);
gCurrentData := F_BIGTYPE(pData := pCurrentBufferPointer, cbLen := _structure_size);

IF _current_index = start_index THEN
	start_time := F_GetSystemTime();
	start_data := gCurrentData;
END_IF

queue_input_flag := FALSE;

IF _next_index <= _current_index OR _current_index >= _buffer_array_size THEN
	//max_chunk_size := nDataBufferMaxIndex + 1;
	// put_data
	IF NOT _recorder.queue.full THEN
		data_size := _current_index - start_index + 1;
		_avalable_buffer_size := UDINT_TO_DINT(_buffer_array_size) - UDINT_TO_DINT(accumulated_amount) +1;
		IF _avalable_buffer_size < UDINT_TO_DINT(data_size) AND _avalable_buffer_size > 0 THEN
			data_size := DINT_TO_UDINT(_avalable_buffer_size);
		ELSIF _avalable_buffer_size <= 0 THEN
			data_size := 0;
		END_IF

		IF data_size > 1 THEN			
			// calculate each cycle time by num of data among start time and current time.
			nCycleTime := ULINT_TO_UDINT(F_GetSystemTime() - start_time) / (data_size - 1);
		ELSE
			nTaskIdx := GETCURTASKINDEXEX();
			IF nTaskIdx > 0 THEN
				nCycleTime := TwinCAT_SystemInfoVarList._TaskInfo[nTaskIdx].CycleTime;
			END_IF
		END_IF
		
		work_data_body.start_pointer := start_data.pData;
		work_data_body.start_time := start_time;
		work_data_body.cycle_time_100ns := nCycleTime;
		work_data_body.chunk_size := data_size;
		work_data_body.accumulated_amount REF= accumulated_amount;
		work_data_body.structure_size := _structure_size;
		work_data_body.structure_name := _structure_name;
		work_data_body.sql_parameters := _sql_parameters;
		// queue in
		_recorder.queue.put(work_data_body);
		start_index := _current_index + 1;
		queue_input_flag := TRUE;
	END_IF
END_IF


IF last_data_count <> accumulated_amount OR queue_input_flag THEN
	(*Re-calculate chunk size when amount of buffered data is changed including dequeued by recorder.*)
	// calculate next index
	_buffer_usage := UDINT_TO_REAL(accumulated_amount) / UDINT_TO_REAL(_buffer_array_size + 1);
	diff_target := UDINT_TO_REAL(_max_chunk_size) * _buffer_usage;
	pid_ope := UDINT_TO_REAL(_min_chunk_size) + diff_target;
	chunk_size := REAL_TO_UDINT(pid_ope);
	IF chunk_size < _min_chunk_size OR pid_ope < 0 THEN
		chunk_size := _min_chunk_size;
	ELSIF chunk_size > _max_chunk_size THEN
		chunk_size := _max_chunk_size;
	END_IF
	//chunk_size := minimum_chunk_size;
	_next_index := _current_index + chunk_size;
END_IF

last_data_count := accumulated_amount;

IF _current_index < _buffer_array_size THEN
	_current_index := _current_index + 1;
ELSE
	_current_index := 0;
	start_index := 0;
	_next_index := chunk_size - 1;
END_IF

write := TRUE;]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="BufferedRecord">
      <LineId Id="9" Count="0" />
    </LineIds>
    <LineIds Name="BufferedRecord.buffer_usage.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BufferedRecord.FB_init">
      <LineId Id="15" Count="0" />
      <LineId Id="25" Count="2" />
      <LineId Id="30" Count="0" />
    </LineIds>
    <LineIds Name="BufferedRecord.index.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BufferedRecord.max_chunk_size.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BufferedRecord.max_chunk_size.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BufferedRecord.min_chunk_size.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BufferedRecord.min_chunk_size.Set">
      <LineId Id="2" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
    <LineIds Name="BufferedRecord.next_index.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BufferedRecord.recorder.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BufferedRecord.recorder.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BufferedRecord.SQL_parameters.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BufferedRecord.structure_name.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BufferedRecord.structure_name.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="BufferedRecord.write">
      <LineId Id="431" Count="13" />
      <LineId Id="541" Count="0" />
      <LineId Id="540" Count="0" />
      <LineId Id="445" Count="12" />
      <LineId Id="459" Count="0" />
      <LineId Id="523" Count="1" />
      <LineId Id="520" Count="1" />
      <LineId Id="519" Count="0" />
      <LineId Id="522" Count="0" />
      <LineId Id="517" Count="1" />
      <LineId Id="461" Count="3" />
      <LineId Id="467" Count="0" />
      <LineId Id="574" Count="0" />
      <LineId Id="576" Count="0" />
      <LineId Id="556" Count="0" />
      <LineId Id="468" Count="2" />
      <LineId Id="537" Count="0" />
      <LineId Id="472" Count="4" />
      <LineId Id="514" Count="0" />
      <LineId Id="477" Count="4" />
      <LineId Id="484" Count="4" />
      <LineId Id="512" Count="1" />
      <LineId Id="489" Count="11" />
      <LineId Id="196" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>